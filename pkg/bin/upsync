#! /usr/bin/env python
# [[file:~/Workspace/Programming/backup/backup-tools.note::20cf001a-a056-4824-bbcb-99ff99979a89][20cf001a-a056-4824-bbcb-99ff99979a89]]
#===============================================================================#
#   DESCRIPTION: synchronize remote site with local
#
#       OPTIONS:  ---
#  REQUIREMENTS:  ---
#         NOTES:  ---
#        AUTHOR:  Wenping Guo (ybyygu)
#         EMAIL:  winpng@gmail.com
#       VERSION:  0.2
#       CREATED:  <2008-03-08 Sat 12:00>
#       UPDATED:  <2017-11-19 Sun 15:55>
#===============================================================================#
# 20cf001a-a056-4824-bbcb-99ff99979a89 ends here

# [[file:~/Workspace/Programming/backup/backup-tools.note::cb1680bc-1c16-433f-b54e-d22ee537ad43][cb1680bc-1c16-433f-b54e-d22ee537ad43]]
import os
import subprocess

GLOBAL_EXCLUDE_FILE = os.path.expanduser("~/Backup/rsync.exclude")
# cb1680bc-1c16-433f-b54e-d22ee537ad43 ends here

# [[file:~/Workspace/Programming/backup/backup-tools.note::8585c9ad-cbdc-4910-8600-1bcf41945efe][8585c9ad-cbdc-4910-8600-1bcf41945efe]]
def user_query_continue(text):
    in_x = os.environ.get('DISPLAY')

    if not in_x:
        # show user the text for sanity check
        print(text)
        yorn = input('Continue or not (y/N)? ')
        return yorn == "y"

    # when we are in X environment
    cmdline = 'zenity --text-info --width=600 --height=600'.split()
    sp = subprocess.Popen(cmdline, universal_newlines=True,
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)
    output, error = sp.communicate(text)
    # user pressed button "cancel"
    if sp.returncode == 0:
        return True
    elif sp.returncode == 1:
        return False
    else:
        print('WARNING: unexpected return code {}'.format(sp.returncode))
        return False
# 8585c9ad-cbdc-4910-8600-1bcf41945efe ends here

# [[file:~/Workspace/Programming/backup/backup-tools.note::8ded775a-2e10-4716-b77f-852adf5d3bb5][8ded775a-2e10-4716-b77f-852adf5d3bb5]]
def _call_rsync(cmdline):
    try:
        output = subprocess.check_output(cmdline, universal_newlines=True, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        msg = ' rsync failed with following errors '.center(70, '=')
        print(msg)
        print('{}'.format(e.stdout))
        print('cmdline:')
        print(cmdline)
        return None

    return output


def mirror_using_rsync(src_dir, dest_dir):
    """mirror current directory to remote host

    Parameter
    ---------
    src_dir, dest_dir: rsync SRC and DEST args
    """

    if not os.path.exists(GLOBAL_EXCLUDE_FILE):
        print("rsync exclude file {}: not found.".format(GLOBAL_EXCLUDE_FILE))
        return

    cmdline = 'rsync -av --ignore-errors --delete --delete-excluded'.split()
    cmdline.append('-F')             # use per directory filer file: .rsync-filter
    cmdline.append('--itemize-changes')
    cmdline.append('--omit-dir-times')
    cmdline.append('--omit-link-times')
    cmdline.append('--protect-args') # for directory containing space
    cmdline.append('--exclude-from={}'.format(GLOBAL_EXCLUDE_FILE))

    current_path = os.getcwd()

    # make sure path ends with slash
    src_dir = src_dir if src_dir.endswith('/') else src_dir + '/'
    dest_dir = dest_dir if dest_dir.endswith('/') else dest_dir + '/'

    cmdline.append('{}'.format(src_dir))
    cmdline.append('{}'.format(dest_dir))

    # sanity check by calling rsync in dry-run mode
    cmdline_dryrun = cmdline.copy()
    cmdline_dryrun.append('--dry-run')

    # ask user if we should continue
    output = _call_rsync(cmdline_dryrun)
    if user_query_continue(output):
        print("cmdline: {}".format(cmdline))
        output = _call_rsync(cmdline)
    else:
        print('cancelled by user.')


def mirror_dwim(remote_host):
    """guess remote path from current directory name and save a mirror to remote

    Parameter
    ---------
    remote_host: the remote host name to be synchronized
    """
    currdir = os.getcwd()

    remote_path = "{}:{}".format(remote_host, currdir)

    mirror_using_rsync(currdir, remote_path)
# 8ded775a-2e10-4716-b77f-852adf5d3bb5 ends here

# [[file:~/Workspace/Programming/backup/backup-tools.note::6b1828ef-5800-44aa-bb9a-132f6f413c4c][6b1828ef-5800-44aa-bb9a-132f6f413c4c]]
def main():
    version = "%(prog)s " + "v0.1"
    desc = "synchronize remote site with local under current directory"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('-v', '--version',
                        version=version,
                        action='version')

    parser.add_argument('remote',
                        type=str,
                        help='remote hostname')

    if len(sys.argv) == 1:
        parser.print_help()
        return

    cmdl = parser.parse_args()
    if cmdl.remote:
        mirror_dwim(cmdl.remote)

if __name__ == '__main__':
    import argparse
    import sys

    main()
# 6b1828ef-5800-44aa-bb9a-132f6f413c4c ends here
