#+TITLE: My backup tools
#+SETUPFILE: ~/Notes/common.org
#+SETUPFILE: ~/Notes/latex.org
#+SETUPFILE: ~/Notes/coding.org

* Memo
** [2017-11-08 Wed] 添加python版upsync脚本
同步当前目录至远程主机上镜像目录里.
* install
** makefile
使用gnu stow来将pkg目录下的文件安装symlink到$HOME/.local

#+header: :tangle makefile
#+name: e15fb2e8-3a89-4ebe-b788-3135e14bc564
#+BEGIN_SRC makefile -i
install: stow
	stow --verbose --adopt --no-folding --target ~/.local pkg
uninstall:
	stow --verbose --target ~/.local --delete pkg
stow:
	which stow
#+END_SRC

* rsync.exclude
#+header: :tangle ~/Backup/rsync.exclude :mkdirp yes
#+name: 096da3bf-b632-4b45-a0b3-a72c6cd81605
#+BEGIN_SRC text
  ,*~
  ,*.swp
  .*.swp
  .*.swx
  ,*.chk
  ,*.mp3
  ,*.ogg
  ,*.pyc
  ,*.bak
  ,*.fbu
  ,*.tmp
  ,*.rmvb
  .#*
  .ropeproject
  .~*#
  cache.rdf
  random_seed
  ~$*.doc
  weave/changes/*
  ,*Cache/*
  cache_menu/*
  ,*emacs.d/history
  ,*/fcitx/table/*
  ,*/fcitx/*/pyindex.dat
  FCITX_*_TEMP
  ,*/.git/index.lock
#+END_SRC

* poor-man's bidirectional synchronization
乞丐版双向同步工具
** notes
- [[http://sujitpal.blogspot.jp/2009/12/unison-replacement-with-rsync.html][Salmon Run: A Unison replacement with rsync]]
** bash
#+name: 99c579c3-8ce4-48b2-9003-0871f708fc83
#+BEGIN_SRC shell :tangle no
  #!/usr/bin/env bash

  mdir=$(mount|awk '{print $3}'|grep ELIBRARY)

  if [ -z "$mdir" ]; then
      mdir=$(mount|awk '{print $3}'|grep Kindle)/documents
  fi

  adir=$(cd $(dirname $0); pwd)
  dir_boox="$mdir/$(basename $adir)"

  if [ ! -d "$dir_boox" ]; then
      mkdir -p "$dir_boox" || exit 1
  fi

  elibrary-back-sync.py "./" "$dir_boox"/

  rsync -rvu --size-only --exclude="*.sh" --exclude=".onyx" --exclude="Makefile" --copy-links "$dir_boox"/ ./
  rsync -rvu --size-only --exclude="*.sh" --exclude=".onyx" --exclude="Makefile" --copy-links --delete ./ "$dir_boox"/

#+END_SRC
** src: pmbisync
:PROPERTIES:
:header-args: :tangle pkg/bin/pmbisync :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python3
:END:
*** header
#+name: fc0e7920-d0cd-4d3c-8a66-4c12646be4b8
#+begin_src python
  # -*- coding: utf-8 -*-
  #====================================================================#
  #   DESCRIPTION:  poor man's bidirectional synchronization tool
  #
  #       OPTIONS:  ---
  #  REQUIREMENTS:  ---
  #         NOTES:  ---
  #        AUTHOR:  Wenping Guo (ybyygu)
  #         EMAIL:  winpng@gmail.com
  #       LICENCE:  GPL version 2 or upper
  #       CREATED:  <2013-05-05 Sun 16:00>
  #       UPDATED:  <>
  #====================================================================#
#+end_src

*** globals
#+name: 59a85edb-8d85-475d-a6ff-95a269cd9014
#+begin_src python
  __VERSION__ = '0.1'

  import os
  import sys
  import getopt
  import os.path
  import cPickle as pickle
  import hashlib

  PICKLE_FILE_NAME = "snapshot.pickle"

#+end_src

*** core
#+name: 995203d6-af98-4371-9973-06b263dd6392
#+begin_src python
  def get_files(rootdir):
      files_list = []
      old_cwd = os.getcwd()
      os.chdir(rootdir)
      for curdir, subdirs, files in os.walk("./"):
          # ignore files in current directory
          if curdir == "./":
              continue
          for afile in files:
              files_list.append(os.path.join(curdir, afile))

      os.chdir(old_cwd)
      return files_list

  def save_snapshot(rootdir, picklefile):
      files = get_files(rootdir)
      pickle.dump(files, open(picklefile, "wb" ))

  def load_snapshot(picklefile):
      return pickle.load(open(picklefile, "rb"))

  def get_removed_since_sync(picklefile, destdir):
      old_files = load_snapshot(picklefile)
      cur_files = get_files(destdir)

      removed_files = []
      for afile in old_files:
          if afile not in cur_files:
              removed_files.append(afile)
      return removed_files

  def bidirectional_sync(srcdir, destdir):
      picklefile = os.path.join(srcdir, PICKLE_FILE_NAME)

      if os.path.exists(picklefile):
          # removed files in the dest side
          for afile in get_removed_since_sync(picklefile, destdir):
              afile = os.path.join(srcdir, afile)
              if not os.path.exists(afile):
                  continue

              yorn = raw_input("Remove {:} [Y/n/q]? ".format(afile)).lower()
              # the default answer is Yes
              if not yorn:
                  yorn = "y"

              if (yorn == "y"):
                  print("do_sync")
                  os.remove(afile)
              elif (yorn == "q"):
                  break
          # removed files in the src side
          for afile in get_removed_since_sync(picklefile, srcdir):
              print afile
              afile = os.path.join(destdir, afile)
              if not os.path.exists(afile):
                  continue
              yorn = raw_input("Remove {:} [Y/n/q]? ".format(afile)).lower()
              # the default answer is Yes
              if not yorn:
                  yorn = "y"

              if (yorn == "y"):
                  print("do_sync")
                  os.remove(afile)
              elif (yorn == "q"):
                  break
      else:
          print("No snapshot found. Save now.")
      save_snapshot(srcdir, picklefile)

#+end_src
*** cmdline
#+name: fe05f3b3-13f9-4ca0-9070-84abf97bc27c
#+begin_src python
  def main(argv=None):
      import optparse

      if argv == None: argv = sys.argv

      # parsing cmdline
      cmdl_usage = 'usage: %prog srcdir destdir'
      cmdl_version = "%prog " + __VERSION__
      cmdl_parser = optparse.OptionParser(usage=cmdl_usage, \
                                          version=cmdl_version, \
                                          conflict_handler='resolve')
      cmdl_parser.add_option('-h', '--help',
                             action='help',
                             help='print this help text and exit')
      cmdl_parser.add_option('-v', '--version',
                             action='version',
                             help='print program version and exit')
      (cmdl_opts, cmdl_args) = cmdl_parser.parse_args()

      if len(cmdl_args) != 2:
          cmdl_parser.print_usage()
          return 1

      srcdir, destdir = cmdl_args

      bidirectional_sync(srcdir, destdir)


  if __name__ == '__main__':
      main()

#+end_src
* upsync
:PROPERTIES:
:header-args: :tangle pkg/bin/upsync :comments link :padline yes :mkdirp yes :shebang #! /usr/bin/env python
:END:
** header
#+name: 20cf001a-a056-4824-bbcb-99ff99979a89
#+begin_src python
  #===============================================================================#
  #   DESCRIPTION: synchronize remote site with local
  #
  #       OPTIONS:  ---
  #  REQUIREMENTS:  ---
  #         NOTES:  ---
  #        AUTHOR:  Wenping Guo (ybyygu)
  #         EMAIL:  winpng@gmail.com
  #       VERSION:  0.2
  #       CREATED:  <2008-03-08 Sat 12:00>
  #       UPDATED:  <>
  #===============================================================================#
#+end_src
** globals
#+name: cb1680bc-1c16-433f-b54e-d22ee537ad43
#+begin_src python
  import os
  import subprocess

  GLOBAL_EXCLUDE_FILE = os.path.expanduser("~/Backup/rsync.exclude")

#+end_src

** interaction
如果在X环境中, 使用zenity与用户交互, 否则使用命令行界面.

#+name: 8585c9ad-cbdc-4910-8600-1bcf41945efe
#+begin_src python
  def user_query_continue(text):
      in_x = os.environ.get('DISPLAY')

      if not in_x:
          # show user the text for sanity check
          print(text)
          yorn = input('Continue or not (y/N)? ')
          return yorn == "y"

      # when we are in X environment
      cmdline = 'zenity --text-info --width=600 --height=600'.split()
      sp = subprocess.Popen(cmdline, universal_newlines=True,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
      output, error = sp.communicate(text)
      # user pressed button "cancel"
      if sp.returncode == 0:
          return True
      elif sp.returncode == 1:
          return False
      else:
          print('WARNING: unexpected return code {}'.format(sp.returncode))
          return False
#+end_src

** synchronization
#+name: 8ded775a-2e10-4716-b77f-852adf5d3bb5
#+begin_src python
  def _call_rsync(cmdline):
      try:
          output = subprocess.check_output(cmdline, universal_newlines=True, stderr=subprocess.STDOUT)
      except subprocess.CalledProcessError as e:
          msg = ' rsync failed with following errors '.center(70, '=')
          print(msg)
          print('{}'.format(e.stdout))
          print('cmdline:')
          print(cmdline)
          return None

      return output


  def mirror_using_rsync(src_dir, dest_dir):
      """mirror current directory to remote host

      Parameter
      ---------
      src_dir, dest_dir: rsync SRC and DEST args
      """

      if not os.path.exists(GLOBAL_EXCLUDE_FILE):
          print("rsync exclude file {}: not found.".format(GLOBAL_EXCLUDE_FILE))
          return

      cmdline = 'rsync -av --ignore-errors --delete --delete-excluded'.split()
      cmdline.append('-F')             # use per directory filer file: .rsync-filter
      cmdline.append('--itemize-changes')
      cmdline.append('--omit-dir-times')
      cmdline.append('--omit-link-times')
      cmdline.append('--protect-args') # for directory containing space
      cmdline.append('--exclude-from={}'.format(GLOBAL_EXCLUDE_FILE))

      current_path = os.getcwd()

      # make sure path ends with slash
      src_dir = src_dir if src_dir.endswith('/') else src_dir + '/'
      dest_dir = dest_dir if dest_dir.endswith('/') else dest_dir + '/'

      cmdline.append('{}'.format(src_dir))
      cmdline.append('{}'.format(dest_dir))

      # sanity check by calling rsync in dry-run mode
      cmdline_dryrun = cmdline.copy()
      cmdline_dryrun.append('--dry-run')

      # ask user if we should continue
      output = _call_rsync(cmdline_dryrun)
      if user_query_continue(output):
          print("cmdline: {}".format(cmdline))
          output = _call_rsync(cmdline)
      else:
          print('cancelled by user.')


  def mirror_dwim(remote_host):
      """guess remote path from current directory name and save a mirror to remote

      Parameter
      ---------
      remote_host: the remote host name to be synchronized
      """
      currdir = os.getcwd()

      remote_path = "{}:{}".format(remote_host, currdir)

      mirror_using_rsync(currdir, remote_path)
#+end_src

** cmdline
#+name: 6b1828ef-5800-44aa-bb9a-132f6f413c4c
#+begin_src python
  def main():
      version = "%(prog)s " + "v0.1"
      desc = "synchronize remote site with local under current directory"
      parser = argparse.ArgumentParser(description=desc)
      parser.add_argument('-v', '--version',
                          version=version,
                          action='version')

      parser.add_argument('remote',
                          type=str,
                          help='remote hostname')

      if len(sys.argv) == 1:
          parser.print_help()
          return

      cmdl = parser.parse_args()
      if cmdl.remote:
          mirror_dwim(cmdl.remote)

  if __name__ == '__main__':
      import argparse
      import sys

      main()
#+end_src

* Local variables
# Local Variables:
# mode: org
# end:
